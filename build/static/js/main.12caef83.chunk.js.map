{"version":3,"sources":["components/text-area/textarea.module.css","components/text-area/text-area.js","components/page-layout/page-layout.js","components/app/App.js","serviceWorker.js","index.js","components/page-layout/page-layout.module.css"],"names":["module","exports","TextArea","name","text","onHandleChange","width","className","styles","textarea","style","minWidth","value","onChange","e","twoColumn","arr","split","part1","slice","Math","ceil","length","part2","treeColumn","part3","arrToString","join","PageLayout","useState","one","setOne","two","setTwo","tree","setTree","editableText","setEditableText","editableText1from2","setEditableText1from2","editableText2from2","setEditableText2from2","editableText1from3","setEditableText1from3","editableText2from3","setEditableText2from3","editableText3from3","setEditableText3from3","update","handleClick","preventDefault","target","classList","contains","handleChangeTextTwoColumn","handleChangeTextTreeColumn","view","buttons","classNames","columnButton","onClick","to","button","App","state","handleChange","setState","changeText","this","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12caef83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"textarea_textarea__2HQAe\"};","import React from 'react';\nimport styles from './textarea.module.css';\n\nconst TextArea = ({ name, text, onHandleChange, width }) => {\n\n  const handleChange = e => {\n    onHandleChange(e);\n  }\n\n  return (\n      <textarea className={styles.textarea} style={{ minWidth: `${width}%` }} name={name} value={text} onChange={handleChange}/>\n  )\n};\n\nexport default TextArea;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport TextArea from '../text-area/text-area';\nimport styles from './page-layout.module.css';\nimport classNames from 'classnames';\n\nconst twoColumn = text => {\n  const arr = text.split(\" \");\n  const part1 = arr.slice(0, Math.ceil(arr.length/2));\n  const part2 = arr.slice(Math.ceil(arr.length/2));\n  return {part1, part2}\n};\n\nconst treeColumn = (text) => {\n  const arr = text.split(\" \");\n  const part1 = arr.slice(0, Math.ceil(arr.length/3));\n  const part2 = arr.slice(Math.ceil(arr.length/3), Math.ceil(arr.length/3)+Math.ceil(arr.length/3));\n  const part3 = arr.slice(Math.ceil(arr.length/3)+Math.ceil(arr.length/3));\n  return {part1, part2, part3}\n};\n\nconst arrToString = arr => {\n  return arr.join(\" \");\n}\n\nconst PageLayout = ({text, onHandleChange}) => {\n\n  const [ one, setOne] = useState(true);\n  const [ two, setTwo] = useState(false);\n  const [ tree, setTree] = useState(false);\n\n  const [ editableText, setEditableText ] = useState(text);\n\n  const [ editableText1from2, setEditableText1from2 ] = useState(arrToString(twoColumn(editableText).part1));\n  const [ editableText2from2, setEditableText2from2 ] = useState(arrToString(twoColumn(editableText).part2));\n\n  const [ editableText1from3, setEditableText1from3 ] = useState(arrToString(treeColumn(editableText).part1));\n  const [ editableText2from3, setEditableText2from3 ] = useState(arrToString(treeColumn(editableText).part2));\n  const [ editableText3from3, setEditableText3from3 ] = useState(arrToString(treeColumn(editableText).part3));\n\n  const update = () => {\n    setEditableText(editableText);\n    setEditableText1from2(arrToString(twoColumn(editableText).part1));\n    setEditableText2from2(arrToString(twoColumn(editableText).part2));\n    setEditableText1from3(arrToString(treeColumn(editableText).part1));\n    setEditableText2from3(arrToString(treeColumn(editableText).part2));\n    setEditableText3from3(arrToString(treeColumn(editableText).part3));\n    onHandleChange(editableText);\n  };\n\n\n  const handleClick = e => {\n    e.preventDefault();\n    if ( e.target.classList.contains('active')) return;\n    if (e.target.classList.contains('button1')) {\n        setOne(true);\n        setTwo(false);\n        setTree(false);\n        update();\n    } else if (e.target.classList.contains('button2')) {\n      setTwo(true);\n      setTree(false);\n      setOne(false);\n      update();\n    } else {\n      setTree(true);\n      setOne(false);\n      setTwo(false);\n      update();\n    }\n  };\n\n  const handleChangeText = (e) => {\n    setEditableText(e.target.value);\n    onHandleChange(editableText);\n  };\n\n  const handleChangeTextTwoColumn = (e) => {\n    if (e.target.name === 'textarea1') {\n      setEditableText1from2(e.target.value);\n      onHandleChange(editableText1from2+' '+editableText2from2);\n    }\n    if (e.target.name === 'textarea2') {\n      setEditableText2from2(e.target.value);\n      // update();\n      onHandleChange(editableText1from2+' '+editableText2from2);\n      // onHandleChange(editableText);\n    }\n    setEditableText(editableText1from2+' '+editableText2from2);\n  };\n\n  const handleChangeTextTreeColumn = (e) => {\n    if (e.target.name === 'textarea3') {\n      setEditableText1from3(e.target.value);\n    }\n    if (e.target.name === 'textarea4') {\n      setEditableText2from3(e.target.value);\n    }\n    if (e.target.name === 'textarea5') {\n      setEditableText3from3(e.target.value);\n    }\n    setEditableText(editableText1from3+\" \"+editableText2from3+\" \"+editableText3from3);\n  };\n\n  return (\n    <form className={styles.view}>\n      {one && <TextArea name=\"text\" onHandleChange={handleChangeText} text={editableText}/>}\n      {two  && (\n        <div className={styles.two}>\n          <TextArea\n            name='textarea1'\n            width={40}\n            onHandleChange={handleChangeTextTwoColumn}\n            text={editableText1from2}\n          />\n          <TextArea\n            name='textarea2'\n            width={40}\n            onHandleChange={handleChangeTextTwoColumn}\n            text={editableText2from2}\n          />\n        </div>)\n      }\n      {tree && (\n        <div className={styles.tree}>\n          <TextArea\n            name='textarea3'\n            width={30}\n            onHandleChange={handleChangeTextTreeColumn}\n            text={editableText1from3}\n          />\n          <TextArea\n            name='textarea4'\n            width={30}\n            onHandleChange={handleChangeTextTreeColumn}\n            text={editableText2from3}\n          />\n          <TextArea\n            name='textarea5'\n            width={30}\n            onHandleChange={handleChangeTextTreeColumn}\n            text={editableText3from3}\n          />\n        </div>\n      )}\n      <div className={styles.buttons}>\n        <button className={classNames({'active': one}, styles.columnButton, 'button1')}\n                onClick={handleClick}\n        >One</button>\n        <button className={classNames(styles.columnButton, {'active': two}, 'button2')}\n                onClick={handleClick}\n        >Two</button>\n        <button className={classNames(styles.columnButton, {'active': tree}, 'button3')}\n                onClick={handleClick}\n        >Tree</button>\n      </div>\n      <Link to=\"/\" className={styles.button}>Home</Link>\n    </form>\n  )\n};\n\nexport default PageLayout;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport TextArea from '../text-area/text-area';\nimport PageLayout from '../page-layout/page-layout';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    text: ''\n  }\n\n  handleChange = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n\n  changeText = text => {\n    this.setState({\n      text: text,\n    });\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div className=\"App\">\n        <h2>Some Title</h2>\n        <Router>\n\n        <Switch>\n          <Route path=\"/layout\">\n            <PageLayout text={text} onHandleChange={this.changeText} />\n          </Route>\n          <Route path=\"/\">\n\n            <TextArea onHandleChange={this.handleChange} name='name' text={text} />\n            <Link to=\"/layout\" className='button'>Layout</Link>\n          </Route>\n        </Switch>\n        </Router>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"page-layout_button__2lCFR\",\"buttons\":\"page-layout_buttons__3S3sx\",\"columnButton\":\"page-layout_columnButton__3IJIg\",\"two\":\"page-layout_two__fcVnh\",\"tree\":\"page-layout_tree__37ZGL\",\"view\":\"page-layout_view__oxBc1\"};"],"sourceRoot":""}